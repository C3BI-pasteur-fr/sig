.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SIG 1"
.TH SIG 1 "2008-05-16" "Unix" "User Manuals"
.SH "NAME"
.IP "\fBsig\fR \- Multiple Prosite motifs searching" 4
.IX Item "sig - Multiple Prosite motifs searching"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PD 0
.IP "\fBsig\fR [options] <\fIfile\fR> ..." 4
.IX Item "sig [options] <file> ..."
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBsig\fR is a program to search multiple occurences of multiple motifs
in a set of sequences.
.SH "OPTIONS"
.IX Header "OPTIONS"
Following command line options are allowed:
.IP "\-f \fIfile\fR" 4
.IX Item "-f file"
Reads pattern definition from file. See syntax definition below.
.IP "\-h" 4
.IX Item "-h"
Usage display.
.IP "\-i" 4
.IX Item "-i"
Allows motifs from pattern to be overlapping. By default motifs are
searched in a non overlapping way.
.IP "\-o \fIfile\fR" 4
.IX Item "-o file"
Places the output into \fIfile\fR.
.IP "\-p \fIpattern\fR" 4
.IX Item "-p pattern"
Searches pattern \fIpattern\fR in \fIfile\fR.
.IP "\-r" 4
.IX Item "-r"
Searches motifs in ordered and reverse search order, conserving the
distance constraints.
.IP "\-v" 4
.IX Item "-v"
Displays the version number.
.SH "FORMAT"
.IX Header "FORMAT"
\&\fBsig\fR only handles fasta sequence format as input.
.PP
\&\fBsig\fR takes what we call a pattern as search argument.
.PP
A pattern consists in motifs definition separated by distance
constraints. The format is strictly the following
\&'motif_1 (min,max) motif_2 ... (min,max) motif_n' and so on.
.PP
Motifs definition should be given in \s-1PROSITE\s0 syntax, for the complete
syntax definition refer to
<URL:http://www.expasy.ch/tools/scanprosite/scanprosite\-doc.html#pattern_syntax<gt>
.PP
Why this pattern syntax, why not just use the Prosite syntax to define
complex motifs ?
.PP
This is particulary useful, when you are looking for at least 3
different motifs. eg for example consider the following \*(L"atomic\*(R"
motifs \fBA\fR, \fBB\fR and \fBC\fR.
.PP
Prosite syntax allow you to define the following \*(L"super motif\*(R"
A\-x(n1,m1)\-B\-x(n2,m2)\-C. but this \*(L"supermotif\*(R" is considered as \s-1ONE\s0
unique motif, while with the pattern definition, the \*(L"atomic motifs\*(R"
still searched in an atomic way.
.PP
This means that a sequence presenting the following motif succession
Nter\-\-\-\fBA\fR\-\-\-\fBA\fR\-\-\-\fBB\fR\-\-\fBC\fR\-\-\-Cter matches the 2 patterns.
.PP
Distance constraints are given in the following form \fB(min,max)\fR
where \fBmin\fR and \fBmax\fR respectively define the minimal and maximal
gap length requested between 2 motifs.
.PP
\&\fBNote\fR that if \fBmin\fR=0 (zero), no minimal gap length constraint is
set. If \fBmax\fR=0 (zero) or absent, no maximal gap length constraint is
set, meaning that gap length could be considered as infinite.
.PP
\&\fBmotif examples\fR
.IP "'R\-P\-V\-Y\-F'" 4
.IX Item "'R-P-V-Y-F'"
matches only with motif \s-1RPVYF\s0
.IP "'R\-x\-V\-Y\-F'" 4
.IX Item "'R-x-V-Y-F'"
matches motif RxVYF where x is any amino acid.
.IP "'[\s-1RK\s0]\-x\-V\-x\-[\s-1FW\s0]'" 4
.IX Item "'[RK]-x-V-x-[FW]'"
matches motif (R or K)xVx(F or W) where x is any amino acid.
.IP "'[\s-1RK\s0]\-x(0,1)\-V\-F'" 4
.IX Item "'[RK]-x(0,1)-V-F'"
matches motif (R or K)xV(F or W) where x is any amino acid represented
0 or 1 times.
.PP
\&\fBpattern examples\fR
.IP "'[\s-1RK\s0]\-x\-V\-x\-[\s-1FW\s0] (0,) F\-x\-x\-[\s-1RK\s0]\-x\-[\s-1RK\s0]'" 4
.IX Item "'[RK]-x-V-x-[FW] (0,) F-x-x-[RK]-x-[RK]'"
no distance constraints are set between motif [\s-1RK\s0]\-X\-V\-X\-[\s-1FW\s0] and
motif F\-X\-X\-[\s-1RK\s0]\-X\-[\s-1RK\s0]
.IP "'[\s-1RK\s0]\-x\-V\-x\-[\s-1FW\s0] (5,15) F\-X\-X\-[\s-1RK\s0]\-X\-[\s-1RK\s0]'" 4
.IX Item "'[RK]-x-V-x-[FW] (5,15) F-X-X-[RK]-X-[RK]'"
motif [\s-1RK\s0]\-X\-V\-X\-[\s-1FW\s0] and motif F\-X\-X\-[\s-1RK\s0]\-X\-[\s-1RK\s0] should be separated
by a gap whose length is longer or equal to 5 and shorter or equal to
15.
.PP
Pattern file must respect one of the following forms and may contain
comment lines.
Lines beginning with a '#' are comments
.PP
Pattern file must contain one and only one pattern definition.
.PP
# pattern syntax 1
.PP
motif_one<newline>
distance_definition<newline>
motif_two<newline>
.PP
# pattern syntax 2
.PP
motif_one distance_definition motif_two
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "sig \-p 'A\-B\-C\-D (0,) E\-F\-G' bar" 4
.IX Item "sig -p 'A-B-C-D (0,) E-F-G' bar"
Will scan fasta formated sequences from file bar, for specified motifs
with no distance constraints and display the motifs found.
.IP "sig \-o results \-p 'A\-B\-C\-D (0,) E\-F\-G' bar" 4
.IX Item "sig -o results -p 'A-B-C-D (0,) E-F-G' bar"
Same as previous, except that results will be written to file results
instead of displayed on standard output (stdout).
.IP "sig \-p 'A\-B\-C\-D (15,25) E\-F\-G' bar" 4
.IX Item "sig -p 'A-B-C-D (15,25) E-F-G' bar"
Will scan sequences from file bar, and display the motifs found with
the requested distance constraints. Motif one and motif two should be
separated by a gap whose length is >=15 and <=25.
.IP "sig \-r \-p 'A\-B\-C\-D (15,25) E\-F\-G' bar" 4
.IX Item "sig -r -p 'A-B-C-D (15,25) E-F-G' bar"
Same as previous, but also searches for motif E\-F-G followed by motif
A\-B-C-D with the same distance constraints. ie motif E\-F-G and motif
A\-B-C-D should be separated by a gap whose length is >=15 and
<=25.
.IP "sig \-i \-p  'A\-B\-x\-x (0,) E\-F\-G' bar" 4
.IX Item "sig -i -p  'A-B-x-x (0,) E-F-G' bar"
Will scan sequences from file bar, and display the motifs found
allowing them to be overlapping. ie ABCD\*(--EFG and \s-1ABEFG\s0 are taken in
account.
.Sp
\&\s-1CAUTION:\s0 in this case distance constraints are ignored, as it makes no
sense to speak about distances. With this option, we no longer check
for distance, but for positions.
.IP "cat bar | sig \-i \-p  'A\-B\-x\-x (0,) E\-F\-G' \-" 4
.IX Item "cat bar | sig -i -p  'A-B-x-x (0,) E-F-G' -"
Same as previous, except that data are read from standard input
(stdin).
.SH "AUTHOR"
.IX Header "AUTHOR"
Eric Deveaud <edeveaud@pasteur.fr>, Institut Pasteur.
